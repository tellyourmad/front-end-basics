回顾:
1. OOP:
 面向对象三大特点: 
   封装:将现实中一个事物的属性和功能集中定义在一个对象中。
    3种: 
     1. 直接量:(创建一个单独的对象)
      var obj={
        属性名:值,
        方法名:function(){
          ...this.属性名...
        }
      }
     2. 用new: 
      var obj=new Object();
      obj.属性名=值;
      obj.方法名=function(){
        ...this.属性名...
      }
     3. 反复创建多个相同结构的对象: 2步
      1. 定义构造函数:
      function 类型名(属性参数列表){
        this.属性名=属性参数;
        /*浪费内存，已被否定
        this.方法名=function(){
          ...this.属性名...
        }*/
      }
      2. 用new调用构造函数: 实例化一个对象。
      var obj=new 类型名(属性值列表);
      new: 1.创建新的空对象
           2.设置新对象的__proto__继承构造函数的原型对象
           3.用新对象调用构造函数，为新对象添加规定的属性和方法。
           4.将新对象的地址保存到变量中

   js中一切对象底层都是hash数组
       
   继承:父对象中的成员，子对象无需重复定义，即可直接使用。
    js中的继承都是原型继承
    原型对象:集中存储一类子对象共有成员的父级对象。
    原型链: 由各级对象的__proto__属性逐级继承，形成的链式结构
      控制着对象中属性的使用顺序

   API: 
   1. 判断指定"属性名"是否是obj的自有属性
    var bool=obj.hasOwnProperty("属性名")
   2. 判断是否是共有属性: 
    !obj.hasOwnProperty("属性名")
     &&("属性名" in obj)
   3. 获取原型对象: 2种:
    构造函数.prototype
    Object.getPrototypeOf(child) 
   4. 删除属性: delete 对象.属性名
   5. 判断一个对象是不是数组类型: 
     1. father.isPrototypeOf(child)
       判断father是否是child的原型链上的父级对象。
     2. child instanceof 构造函数
       判断child是否是构造函数的实例
     3. 输出对象的内部属性class:
Object.prototype.toString.call(obj)
        输出obj的class属性
     4. Array.isArray(obj)
       判断obj是否是数组类型
   
   自定义继承: 3种:
   1. 直接修改一个对象继承另一个对象:
    Object.setPrototypeOf(child,father);
   2. 修改构造函数的原型对象，批量修改之后所有子对象的父对象
    构造函数.prototype=father
    时机: 在开始创建子对象之前就修改。
   3. 两种类型间的继承: inherits&&extends
     抽象: 如果多个子类型之间有相同的属性结构和方法定义，就要抽象出一个父类型，将相同的属性结构和方法定义统计定义在父类型中。 
     在子类型构造函数中借用父类型构造函数：extends
     function 子类型构造函数(...){
        //new 子类型构造()->this->新对象
 	父类型构造函数.call(this,参数1,参数2,...)
        ...扩展新属性
     } 
     其实: 父类型构造函数.call(this,参数1,参数2,...)可简写为: 
     父类型构造函数.apply(this,arguments)
     让子类型原型继承父类型原型:inherits
     Object.setPrototypeOf(
	子类型原型, 父类型原型
     )

   call vs apply: 
    相同: 都是强行借用任意函数，并替换函数中的this为指定对象。
    不同: 参数: 
      call,只能将传入借用的函数的参数，单独传入。
      apply,可将传入借用的函数的参数，以数组方式传入。apply可自动打散数组为单个参数。

   多态: 
     重写(override):如果子对象觉得父对象继承来的成员不好用，可子定义同名的自有成员，来覆盖父对象的成员。

正课:
1. *****ES5:
*****对象的属性
  Object.create
  数组API
*****函数的bind()
  严格模式

1.*****对象的属性: 
  ES认为对象就是属性的集合
  属性分为:
   命名属性:自定义的或可直接用.访问到的属性
     数据属性: 直接存储属性值得属性
       将每个属性都定义为四大特性:
         value: 实际存储当前属性值
         writable: 标识属性是否可修改
         enumerable: 标识属性是否可被for in遍历到。即使改为false，依然可用.访问到
         configurable: 标识能否删除属性或修改属性的其他特性
       为什么: 特性是对属性的保护
           configurable保护其他特性
       如何访问特性:
        Object.getOwnPropertyDescriptor(
          obj,"属性名"
        )
	返回一个对象，对象中包含了属性的四大特性
       如何修改属性的特性:
     1. 只修改一个属性的四大特性: 
     Object.defineProperty(obj,"属性名",{
	writable:false,
        configurable:false
     })
     强调: 为了防止其他人再将writable改回true，可将configurable一并设置false。
      configurable一旦改为false，不可逆。
     2. 同时修改多个属性的四大特性: 
     Object.defineProperties(obj,{
	属性名:{
          特性名:值,
          ...
        },
        属性名:{
	  特性名:值,
          ...
        }
     })
        
     关于特性的默认值: 
     defineProperty/defineProperties，如果要修改的属性不存在，会自动添加新属性。
     但是，被defineXXX添加的新属性，所有特性默认值为false！

*****访问器属性: 不直接存储属性值，而是对其他属性提供保护的一种特殊属性。
       何时: 如果使用自定义的验证规则保护属性时。
       四大特性: 
         set:function(val){
	   验证val
	   如果验证通过，才将val赋值给受保护的数据属性
         }//只要对访问器属性赋值时，自动调用访问器属性的set方法
	 get:function(){
           return 受保护的数据属性的值
         }//只要使用访问器属性取值时，自动调用访问器属性的get方法
	 enumerable: 同数据属性
         configurable: 同数据属性
     如何定义:
     都用defineProperty/defineProperties 

   内部属性:不建议或不允许访问的属性







