正课:
1. *****Function
  闭包
2. *****OOP

1. *****Function:
闭包:
 如何: 3步:
  1. 用外层函数封装受保护的变量和操作变量的内层函数
  2. 外层函数返回内层函数的对象
  3. 使用者调用外层函数，获得内层函数的对象。

 三大特点: 
  1. 外层函数
  2. 受保护的变量
  3. 内层函数

 BS:
  1. 先找受保护的变量:
    1. 外层函数的局部变量
    2. 内层函数中被使用
    判断当外层函数结束时，受保护的变量最终的值。
  2. 找外层函数返回的内层函数对象:
    1. return function
    2. 直接给全局变量赋值一个function
    3. 将多个内层函数放入数组或对象中，批量返回。
  结论: 
  同一次外层函数调用返回的多个内层函数对象共用同一个受保护的变量。
  先后两次外层函数调用返回的两个内层函数对象，分别使用各自的受保护的变量副本，互不影响。

  优: 重用变量，且保护其不被篡改
  缺: 占用更多的内存空间。
      无法自动释放

2.*****面向对象: 
  什么是: 程序中都是用对象来描述现实中一个具体事物。
    什么是对象: 程序中封装现实中一个具体事物的属性和功能的程序结果
       事物的属性，会成为对象的属性
       事物的功能，会成为对象的方法
  为什么: 更符合人的想法。
  如何使用: 2步:
    1. 先用对象描述一个事物的属性和功能
       -创建对象/封装
        封装: 将事物的属性和功能集中定义在一个对象中。
      3种: 
      1.对象直接量:
        var obj={
          属性名:值,
          方法名:function(){
            //对象的方法中，要使用对象自己的属性，必须写成"this.属性名"
             //当前对象的...
          }
        }
       this: 指正在调用方法的.前的对象
***js中一切对象底层都是hash数组

      2.用new:
       var obj=new Object();
       obj.属性名=值;
       obj.方法名=function(){
	 ...this.属性名...
       }
       其中new可省，()也可省，但不能同时省略。
      3.反复创建多个相同结构的对象:
        2步:
        1.定义构造函数:
         什么是: 专门描述一类对象统一结构的函数。
         何时: 只要反复创建多个相同结构的对象时。
         为什么: 代码重用――优
         如何: 
           function 类型名(属性参数){
             this.属性名=属性参数;
             this.方法名=function(){
               ...
             }
           }
       2.用new调用构造函数: 
         var obj=new 类型名(属性值);
      new: 4件事儿:
       1. 创建了一个空对象:
       2. ?
       3. 用空对象调用构造函数
       4. 返回新对象地址给变量

       缺: 没有解决内存浪费的问题

    2. 再按照逻辑的需要，依次调用对象中的功能来操作对象的属性。
      访问对象的成员(属性和方法):
        操作对象的属性: obj.属性名
          其实就是一个放在对象中的普通变量而已。
        特殊: 
         访问对象中没有的属性,不报错,返回undefined.
         为对象中不存在的属性赋值，不报错，会自动添加属性，保存属性值。
        调用对象的方法: obj.方法名();
          其实就是一个放在对象中的普通函数而已。

  
  





