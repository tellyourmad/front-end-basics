回顾: 
1. DOM树:
   节点对象: Node
      nodeType
          document: 9
          element: 1
          attribute: 2
          text:3
      nodeName
          document: #document
          element: 标签名(全大写)
          attribute: 属性名
          text: #text
      nodeValue
          document: null
          element: null
          attribute: 属性值
          text: 文本内容

   节点间关系: 
     节点树: 
     1. 父子关系: 
        elem.parentNode
        elem.childNodes (live collection)
        elem.firstChild
        elem.lastChild
     2. 兄弟关系:
        elem.previousSibling
        elem.nextSibling
     元素树: 
     1. 父子关系:
        elem.parentElement
        elem.children (live collection)
        elem.firstElementChild
        elem.lastElementChild
     2. 兄弟关系:
        elem.previousElementSibling
        elem.nextElementSibling

   遍历: 
   1. function getChildren(parent){
          //输出parent
          var children=parent.childNodes;//children
          for(var i=0,len=children.length;i<len;i++){
	getChildren(children[i]);
          }
       }
   2. 遍历API: 
      NodeIterator: 
        var iterator=document.createNodeIterator(
             parent,NodeFilter.SHOW_ALL, null, false
                                          .SHOW_ELEMENT
        );
        var curr=iterator.nextNode();//获得下一个节点
        while((curr=iterator.nextNode())!=null){
            //curr就是当前节点
        }

      TreeWalker:
       var walker=document.createTreeWalker(
             parent,NodeFilter.SHOW_ALL, null, false
                                          .SHOW_ELEMENT
        );
       基本用法同iterator，外还扩展了:
         walker.parentNode();
         walker.firstChild();
         walker.lastChild();
         walker.nextSibling();
         walker.previousSibling();

正课:
1. ***查找: 
   1. 利用节点间关系查找周围的元素
   2. 用HTML属性查找: 
       按id:  var elem=document.getElementById("id");
          只能找到一个元素
          如果没找到，返回null
          强调: 必须用document调用。
       按标签名:  
           var elems=
	parent.getElementsByTabName("标签名");
           在指定父元素parent下查找指定标签名的元素
           返回live collection
           强调: 查找所有子代节点
       按name:
           var elems=
                parent.getElementsByName("name");
           在指定父元素parent下查找指定name属性的元素
           返回live collection
       按class: 
           var elems=
               parent.getElementsByClassName("class");
           在指定父元素parent下查找指定class属性的元素
           返回live collection

       如果getElementsXXX没找到，返回空集合[]

  3. 用选择器查找: 
       1. 只查找一个符合选择器要求的元素:
          var elem=parent.querySelector("selector");
	如果没找到，返回null
       2. 查找多个符合选择器要求的元素:
          var elem=parent.querySelectorAll("selector");
                如果没找到，返回空集合[]
      强调: 返回no-live collection:
            包含完整属性的集合，反复访问不会导致重复查找DOM树

   鄙视题: getXXX vs querySelector
    1. 执行效率: 
        如果通过一个属性即可找到的元素
             getXXX更快  返回live collection
             querySelector 更慢  no-live collection
    2. 代码量:
        如果需要通过多次查找才能获得想要的元素时
             querySelector 更简单
             getXXX 繁琐
 
  4. VIP通道:
     document.body
     document.head
     document.documentElement : html


 




