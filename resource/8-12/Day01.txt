1、复杂选择器
	1、作用
		匹配 页面的元素 ... ...
	2、选择器分类
		1、兄弟选择器
			1、作用
				通过 元素的位置关系匹配元素
				位置关系：兄弟关系(平级元素)
				<div>
					<p id="p1"></p>
					<p id="p2"></p>
					<p id="p3"></p>
					<p id="p4"></p>
				</div>
			2、相邻兄弟选择器
				1、作用
					匹配指定元素的相邻兄弟元素
					被匹配的元素要 紧紧的跟在 前一个元素的后面
				2、语法
					选择器1+选择器2
					#p1+p{}
			3、通用兄弟选择器
				1、作用
					匹配某元素后面所有的兄弟元素
				2、语法
					选择器1~选择器2{}
		2、属性选择器
			1、作用
				使用元素所附带的 属性及其值，来匹配页面的元素
				ex ：获取页面中所有 type 值为 text 的元素
			2、语法
				语法：[] 
				1、[属性名]
					作用：匹配页面中 所有 附带 指定属性的元素
					[class] : 匹配页面中所有附带 class 属性的元素
					[type] : 
				2、元素[属性名]
					作用：页面中所有 附带 指定 属性的 指定元素
					ex:
						p[id]:匹配 所有 附带 id 属性的p元素
						input[type]:匹配 所有 附带 type 属性的 input元素
						input[type][class]:匹配 所有附带 type属性 和 class 属性的 input元素
				3、元素[属性名=值]
					作用：匹配 所有 属性名 = 指定值得 元素
					ex:
					 1、获取页面上所有的文本框(type=text)
						[type=text]{}
						input[type=text]{}
				4、元素[class~=值]
					<div class="c1 c2 c3 c4"></div>
					作用：匹配 附带 class属性的 元素，其中class属性的值是以 空格 隔开的值列表。"值" 是列表中的一个独立单词
					div[class~=c2]
				5、元素[属性^=值]
					作用：匹配 属性值 以 值作为开始的元素
					ex:
						div[class^=c] : 匹配页面中 class属性值以c作为开始的div元素

						获取页面中，所有 name 属性值 以 txt 作为开始的 input元素
						input[name^=txt]
				6、元素[属性*=value]
					作用：匹配页面中 属性值中 包含value字符的元素
					ex:
						div[class*="ort"]
						<div class="important"></div>
				7、元素[属性$=value]
					作用：匹配页面中 属性值 以value字符作为结尾的元素
		3、目标伪类
			1、作用
				突出显示活动html 锚点 元素
			2、语法
				:target
		4、元素状态伪类
			1、匹配 启用、禁用、被选中状态
			2、语法
				:enabled : 匹配每个已启用元素(表单元素中)
				:disabled : 匹配每个已禁用元素(表单元素中)
				:checked : 匹配每个被选中的元素(checkbox,raido)
		5、结构伪类(重点)
			1、通过结构关系进行元素匹配
			2、语法
				1、:first-child
					匹配 属于其父元素中的首个子元素
					td:first-child{background:red;}
				2、:last-child
					匹配 属于其父元素中的最后一个子元素
				3、:nth-child(n)
					匹配 属于其父元素中的第n个子元素
					:nth-child(1) --> :first-child
				4、:empty
					匹配 没有子元素(文本)的元素
					<div>
						<p>xxx</p>
					</div>
					非 empty

					<div>xxxx</div>
					非 empty

					<div>
					</div>
					非 empty

					<div></div>
					empty  
					div:empty
				5、:only-child
					匹配 属于去 父元素中的 唯一子元素
		6、否定伪类
			语法：
				:not(选择器)
			作用：将 指定选择器匹配的元素 排除在外
		7、伪元素选择器
			1、伪元素 与 伪类的区别
				1、伪类 ：匹配 元素 
				2、伪元素 ：匹配元素中的文本内容
			2、分类
				1、:first-letter 或 ::first-letter
					作用：用于匹配 元素中的首字符
				2、:first-line 或 ::first-line
					作用：用于匹配元素中的 首行
				3、::selection
					作用：匹配用户选取的部分
			3、: 与 ::之间的区别
				W3C规范 
				  : 表示的 是伪类选择器
					:: 表示的是 真正的 伪元素选择器

					在 CSS2.1的时候，伪类 和 伪元素 都是用 : 来进行表示

					现阶段，推荐使用 : 即表示伪类，页表示伪元素
2、内容生成
	1、作用
		允许使用CSS的方式，在匹配元素内容区域之前或之后 插入新的数据
		<div>普通的div</div>
	2、选择器(伪元素)
		1、:before
			匹配 元素 内容区域之前
		2、:after
			匹配 元素 内容区域之后
	3、属性
		属性：content
		作用：配合 :before 和 :after 一起插入生成的内容
		取值：
			1、图像 ：url()
			2、字符串：纯文本
			3、计数器
	4、计数器
		1、作用
			通过 CSS 生成 一组有序的数字，通过 内容生成的方式，插入到元素中
		2、属性 和 函数
			1、counter-reset
				counter：计数器
				reset：重置，复位

				1、作用
					定义 或 复位 一个计数器，并设置其初始值
				2、语法
					counter-reset:名称 值;
					注意：
					1、默认值 可以省略，省略则为 0
					2、声明位置：不要放在使用计数器的元素中声明
					3、声明多个计数器
						counter-reset:名称 值 名称 值;
			2、counter-increment
				1、作用
					设置某个选择器每次每次出现的计数器 增量
				2、语法
					counter-increment:名称 增量值;
					注意：
						1、增量值可省，默认值为1
						2、增量之可以为正(递增),也可以为负(递减)
						3、什么地方声明：哪个元素使用，放在哪个元素中声明
						4 、设置 多计数器 增量
							counter-increment:名 增量 名 增量;
			3、函数:counter()
				语法：content:counter(计数器名)
		3、练习
			完成以下内容展示(通过计数器)
			1、html
				1.1 块级元素
				1.2 行内元素
				1.3 图片元素
			2、CSS
				2.1 行内样式
				2.2 内部样式表
				2.3 外部样式表 
3、多列
	1、分隔列
		属性：column-count
		取值：数字
	2、列间隔
		属性：column-gap
		取值：px为单位的数字
	3、列规则
		作用：每两个列之间的边框的大小 样式 颜色
		属性：column-rule
		取值：width style color;
	4、兼容性
		IE10+ , Opera 支持 多列

		Firefox ：-moz-
		Chrome、Safari ：-webkit-
4、CSS Hack
	1、IE 标准模式和 混杂模式
		运行模式：
		1、标准模式
		2、混杂模式
		3、准标准模式
		
		不同模式 
			1、CSS 框模型 有影响
			2、JS解析 有影响

		依靠 <!doctype>进行模式选择
  2、CSS Hack
		浏览器的类型以及版本 不同 会造成 CSS效果 显示不同
			1、不同厂商的浏览器 
				IE ，Firefox ，Chrome，Safari，Opera
			2、同一厂商浏览器的不同版本
				IE6 IE7 IE8 ... ...
	3、CSSHack 工作原理
		1、通过 选择器器 或 样式的优先级 来解决兼容性问题
		2、实现方式
			1、CSS 类内部Hack
				通过 前后缀的 方式解决兼容性
			2、选择器Hack
				在选择器前加前缀 解决兼容性问题
			3、HTML头部引用Hack
				通过 条件注释 来解决兼容性问题

				根据 条件注释 来判断浏览器的类型和版本，再决定执行哪些代码
				语法：
				<!--[if 关键字 IE 版本]>
					满足条件的话可以被正常执行
					否则，就被注释掉
				<![endif]-->
				1、关键字
					1、省略
						判断是否为 IE 或 是否为IE的指定版本
						ex
							<!--[if IE]>
								该段内容只有在 IE浏览器中被运行
							<![endif]-->

							<!--[if IE 6]>
								该段内容只有在 IE6 浏览器中被运行
							<![endif]-->
					2、gt
						greater than
						选择条件版本以上版本浏览器，不包含条件版本

						<!--[if gt IE 6]>
							在 IE6(不包含) 以上版本的浏览器中显示
						<![endif]-->
					3、gte
						greater than or equal
						大于等于
						包含指定版本浏览器
					4、lt
						小于指定版本(不包含)
					5、lte
						小于等于指定版本(包含)
					6、!
						选择条件版本以外的所有版本
						








