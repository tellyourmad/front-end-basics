回顾:
1.数组:
  排序: arr.sort();
    function cmp(a,b){return a-b};
    arr.sort(cmp);
    function cmp(a,b){return b-a};
  栈和队列:
    栈: FILO
     结尾: 入: arr.push(值)
           出: var last=arr.pop(值);
     开头: 入: arr.unshift(值)
           出: var first=arr.shift();
    队列:FIFO
     结尾入:arr.push(值)
     开头出:var first=arr.shift();
  二维数组:
    遍历:
     for(var r=0;r<arr.length;r++){
      for(var c=0;c<arr[r].length;c++){
        arr[r][c]//当前元素
      }
     }
2. String:
 大小写转换: 
   str.toUpperCase();
   str.toLowerCase();
 获得指定位置的字符:
   str.charAt(i) => str[i]
   var unicode=str.charCodeAt(i)
    var char=String.fromCharCode(unicode)
 获取子字符串:
   str.substring(starti,endi+1)
       => str.slice(starti,endi+1)
   str.substr(starti,n)
 检索关键词:
   1. 仅检索一个固定关键词出现的位置
     var i=str.indexOf("关键词",fromi);
    找所有位置:
     while(
      (i=str.indexOf("关键词",i+1))!=-1{
	i//就是找到关键词的位置
     }
    找最后一个: 
     var i=
       str.lastIndexOf("关键词",fromi) 
    
    问题:每次只能检索一个固定的关键词，无法实现按规则模糊检索

正课:
1. *****正则表达式：
2. ***String中的正则API
   查找
   替换
   切割

1. 正则表达式（Regular Expression）
 什么是: 规定字符串中字符出现规律的规则
 何时使用: 
    1. 只要按规则模糊匹配多个关键词时
    2. 只要按规则验证字符串是否符合要求
 查看正则的逻辑: regexper.com
 语法:
  1. 最简单的正则，就是关键词原文
  2. 字符集: 规定1位字符可用的备选字符的列表: [备选字符列表]
    何时使用: 如果一位字符，有多种选择时
    简写: 如果字符列表中部分字符连续,就可用-省略中间的字符
     比如: 1位字母:[A-Za-z]
           1位数字:[0-9]
    除了: [^xxx] 除了xxx都行
  3. 预定义字符集:
      对部分常用字符集的简化
      1位数字 \d  => [0-9]
      1位字母，数字,_ \w => [A-Za-z0-9_]
      1位空字符(空格，换行，Tab): \s

      . 匹配除回车换行外的所有字符
     强调: 只有需求和预定义字符集完全匹配时，才能使用预定义字符集。
  4. 量词: 专门规定一个字符集出现次数的规
则。
    有明确数量限制:
      字符集{n,m}  字符集可出现至少n次，最多m次
      字符集{n,}  字符集至少出现n次，多了不限
      字符集{n}  字符集必须出现n次

    没有明确数量显示:
      字符集?   可有可无，最多一次
      字符集*   可有可无，多了不限
      字符集+   至少一次，多个不限
    强调: 字符集，默认仅修饰相邻的前一个字符集。

   身份证号:
    前15位数字
    再跟2位数字
    最后一位可以是数字或x,X
    \d{15}(\d{2}[0-9xX])?

  5. 分组和选择:
    分组: 将多个字符集用()包裹为一组
      何时: 为了让一个两次同时修饰多个字符集。 
    选择: 其实就是程序中的或者 |
     规则1|规则2  只要满足其一即可

   手机号: 
     +86或0086? 可有可无，最多一次
     空字符  可有可无，多了不限
     1
     在3,4,5,7,8之中挑一个
     9位数字
    ^(\+86|0086)?\s*1[34578]\d{9}$

  6.指定匹配位置:
    ^ 字符串开始位置
    $ 字符串结尾位置
    何时: 1. 验证时，都要前加^，后加$
      2. 仅匹配开头的或结尾的关键词
    
  密码强度: 
    6~8位字母，数字的组合，至少包含一位大写字母和一位数字
    预判: 从头到尾判断字符串是否符合指定规则。
     1. 如果不都由字母组成:
       说明，可能有数字或特殊符号
      (?![A-Za-z]+$)
     2. 如果不都由小写字母和数字组成:
       说明，可能有大写字母或特殊符号
      (?![a-z0-9]+$)
     3. 必须由字母和数字组成:
	排除特殊字符的干扰
      [A-Za-z0-9]{6,8}

   ^(?![A-Za-z]+$)(?![a-z0-9]+$)[A-Za-z0-9]{6,8}$

2. String正则API
 检索关键词:
   1. indexOf: 不支持正则
   2. 判断是否包含符合规则的关键词:
     var i=str.search(/正则/);
      查找str中是否包含符合正则要求的关键词。
      如果找到，返回关键词的位置
      如果找不到，返回-1
    强调: search没有第二个参数fromi，不能指定下次开始查找的位置，始终只能找第一个关键词的位置。所以，只能用作判断有没有。
    












