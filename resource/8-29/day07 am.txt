回顾: 
数组: 
  创建：
    1. 创建空数组: 
      1. 直接量: var arr=[];
      2. 用new: var arr=new Array();
    2. 创建数组同时，初始化数组元素:
      1. 直接量: var arr=[值1,值2,...]
      2. 用new: 
	var arr=new Array(值1,值2,...);
    3. 创建n个空元素的数组:
      用new: var arr=new Array(n);

  访问元素:
    arr[i]
  三个不限制: 
    1. 不限制元素的数据类型
    2. 不限制元素个数――添加元素时
      不报错, 在任意位置添加新元素
    3. 不限制下标越界――获取元素时
      不报错，返回undefined

  length: 标识理论上的元素个数
    固定套路:
      1. 最后一个: arr[arr.length-1]
      2. 倒数第n个: arr[arr.length-n]
      3. 末尾追加: arr[arr.length]=值
      4. 缩容: arr.length-=n;

  遍历: for(var i=0;i<arr.length;i++){
	   arr[i]//当前元素
        }
  
  索引数组: 下标是数字的数组
    稀疏数组: 下标不连续的数组
  关联/hash数组: 可自定义下标名称的数组
    创建: 2步:
      Step1: 创建空数组:
         var lxr=[];
      Step2: 向空数组中添加新元素，使用自定义的下标名称
         lxr["name"]="林心如"

    访问元素:lxr["name"]

    length属性: 失效，始终为0
    
    遍历: for(var key in hash){
            key//依次获得hash中每个下标名称
            hash[key]//当前元素
          }

数组API: 
1. 转字符串:2种
  1. var str=String(arr)
  2. var str=arr.join("自定义分隔符")
    固定套路:
     1. 无缝拼接: arr.join("")
     2. 将单词拼接为句子: arr.join(" ")
     3. 判断是否空数组: arr.join("")==""
     4. 将数组内容动态生成页面元素:
      <标签>+
      arr.join("</标签><标签>")
      +</标签>
2.拼接和选取: 
  拼接:
  var newArr=arr1.concat(值1,值2,arr2,..)
    强调: 可打散数组参数为单个元素
  选取:
  var subArr=arr.slice(starti,endi+1)
    强调: 含头不含尾
          支持负数(倒数)下标
            其实,arr.length-n
    简写: 省略第二个参数，一直选取到结尾
          两个参数都省略, 完整复制原数组
3. splice: 
   删除: var deletes=arr.splice(starti,n)
     强调: 直接修改原数组
           返回被删除的元素组成的临时数组
   插入: arr.splice(starti,0,值1,值2,...)
     强调: 不能打散数组类型参数
   替换: arr.splice(starti,n,值1,值2,...)
     强调: 插入的新元素个数不必和删除的元素个数一致。

4. 翻转: arr.reverse();

正课:
1. ***数组:
  ****排序
  栈和队列
  二维数组
2. ***String:
  
****排序:
  自定义排序算法: 冒泡，插入，快速
  冒泡: 从头开始遍历数组中每个元素
          如果当前元素>下一个元素
            就交换两数的位置

    交换两变量值:a,b
      1. 声明第三个变量:
         var t=a;
         a=b;
         b=t;
      2. 不声明第三个变量: 仅能交换数字
         a+=b; b=a-b; a-=b;
      3. 不声明第三个变量: 万能
         b=[a,a=b][0];

  使用排序API:
  arr.sort(); 默认，仅能对字符串升序排列
  解决: 自定义比较器函数
    什么是比较器函数: 
        专门用来比较任意两数大小的函数
      要求: 
        1. 2个参数,a,b
        2. 如果a>b，就返回正数      
           如果a<b，就返回负数
           如果a==b,就返回0
      最简单的数字比较器: 
        function cmp(a,b){return a-b;}
    如何使用比较器函数：
    将比较器函数对象，作为sort方法的参数
        arr.sort(cmp);
      强调: cmp后，不要加()
           区别: 不加()，是将函数对象放入sort中，sort可反复调用执行。
                 加()，仅是将函数的执行结果，放入sort中，sort方法无法反复调用。

  降序排列: 颠倒比较器返回值的正负
    比如: 
     function cmp(a,b){return -(a-b)};

栈和队列:
  js中没有专门的栈和队列类型，都是用普通该数组模拟的。
  何时: 只要希望按照顺序使用数组元素时
  
  栈: 一端封闭，只能从另一端进出的数组
   顺序: FILO
    何时: 如果希望始终操作最后进入数组的最新的元素时。
    如何: 
      结尾出入栈: 
        入: arr.push(值);
        出: var last=arr.pop();
        优: 每次出入栈不影响其余元素的位置
      开头出入栈:
        入: arr.unshift(值);
        出: var first=arr.shift();
        缺: 每次出入栈都会影响每个元素的位置

  队列: 只能从一端进入，从另一端出
    顺序: FIFO
    何时: 只要按照先来后到的顺序使用元素
    如何: 
      从结尾入队列: arr.push(值)
      从开头出队列: var first=arr.shift()








