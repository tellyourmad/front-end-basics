正课:
1.二维数组
2.***String

1. 二维数组: 
  什么是: 数组中的元素，又引用了另一个子数组。
  何时: 
    1. 存储横行竖列的二维数据
    2. 对一个大的数组中的元素，进一步分类
  如何:
    创建: 
     1. 先创建空数组，再添加子数组:
       var arr=[];
       arr[0]=[2,2,4,0];
       arr[1]=[0,2,2,0];
     2. 在创建数组同时，初始化子数组
       var arr=[
	 [2,2,4,0],//0
         [0,2,2,0],//1
         ...
       ];
    
    访问元素: 
      arr[r][c]:访问arr中r位置的子数组中的c位置的元素
      越界: r不能越界

    遍历: 外层循环控制行，内层循环控制列
      for(var r=0;r<arr.length;r++){
       for(var c=0;c<arr[r].length;c++){
	 arr[r][c]//当前元素    
       }
      }

2. ***String: 
  什么是: 一串字符组成的只读字符数组
    vs数组: 1. 下标访问每个字符
           2. length属性标识字符个数
           3. 用for循环遍历每个字符
           4. 数组中不直接修改原数组的API，字符串也可用
            concat,slice

  内置对象: ES标准中规定的，浏览器已经实现的对象。包括11个:
    String Number Boolean――包装类型
    Array Math Date RegExp
    Error
    Function Object
    Global(在浏览器中被替换为window)

  包装类型:专门封装原始类型的值，并提供对原始类型的值进行操作的API 的对象
   为什么:原始类型的值，本身什么API都没有
   何时: 只要试图用原始类型的值调用方法时
         都会自动创建包装类型对象
   如何使用: 自动创建和调用。

StringAPI: 所有StringAPI，都无权修改原字符串，必须返回新字符串
1. 大小写转换: 
   何时使用: 不区分大小写时
  str.toUpperCase();
  str.toLowerCase();
2. 获取指定位置的字符: 
  str.charAt(i) => str[i]
  str.charCodeAt(i)
    获得str中i位置的字符的unicode号
    互逆操作: 将unicode号转为原字符
   var char=String.fromCharCode(unicode);
3. 获取子字符串:
  str.slice(starti,endi+1);
  str.substring(starti,endi+1);
    用法和slice完全一样。
    不支持负数参数:
      解决: str.length-n
  str.substr(starti,n);
    截取str中starti开始后的n个字符
4.检索关键词: 
  1. 检索一个固定的关键词出现的位置
    var i=str.indexOf("关键词",fromi);
     从str中fromi位置开始，找下一个"关键词"出现的位置。
     如果找不到了，返回-1
     简写: 省略fromi，表示从0位置开始找

    var i=str.lastIndexOf("关键词",fromi)
     从str中fromi位置开始查找前一个"关键词"出现的位置
     如果找不到，返回-1
     简写: 省略fromi, 表示从末尾开始找
     何时: 只要查找最后一个xxxx






