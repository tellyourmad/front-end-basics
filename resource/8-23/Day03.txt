1、赋值运算符
	1、=
		变量 = 表达式|数值;

		var salary = 2000;
		var result = salary >= 5000;

		var a=b=c=10; //可以，不推荐该写法
	2、扩展赋值表达式
		+=,-=,*=,/=,%=,^=
		
		声明一个变量salary表示工资，并赋值为1000，为salary+500，作为涨工资后的结果，打印工资
		1、
			var salary = 1000;
			var newSalary = salary + 500;
		2、
			var salary = 1000;
			salary = salary + 500;
		3、语法
			a += b; ==> a = a + b;
			a *= b; ==> a = a * b;
		4、练习
			a=18
			b=25

			a=25，b=18
2、函数(重难点)
	1、什么函数
		函数:function，也叫 方法(method)或过程(procedure)

		是一段预定义好，并且可以被反复执行的代码块。
		预定义：提前先声明好，不是马上使用。
		反复执行：可以被循环利用
		代码块：允许包含多条可执行语句

		函数本质实际上是功能完整的对象。
	2、定义 函数(方法)
		1、语法
			function 函数名(){
				若干可执行语句(代码块)
			}

			函数名：遵循标识符的规范
		2、函数调用
			允许出现JS脚本的地方都可以实现 "函数调用"
			语法：函数名();

			parseInt();
			parseFloat();
			Number();
			console.log();
		3、定义带参函数
			1、语法
				function 函数(参数列表){
					代码块
				}
				参数列表：由一个或多个 参数名称 组成，多个参数间，用 , 来 分隔。定义时的参数，称之为 "形参(形式上的参数)"
			2、调用
				函数名(参数列表);
				参数列表：由一个或多个 值 组成，按照定义好的顺序，往里传递。调用函数时所传递的参数值，称之为 "实参(实际参数)"
				
				function parseInt(value){
					.......
				}
		4、带返回值的函数
			var num=parseInt("25.5");

			语法：
				function 函数名([参数列表]){
					代码块;
					//如果有返回值
					return 值/表达式;
				}

				return:返回
					1、将指定的值或表达式带出到函数调用的位置处
					2、并终止当前函数的执行

		5、练习
			1、定义一个可以接受两个数字的方法，返回这两个数字的和，并调用方法，打印输出最终结果
	3、变量的作用域
		1、什么是作用域
			作用域就是变量或函数的可访问范围。控制变量或函数的可见性和生命周期

			作用域可分为：
				1、函数作用域：局部变量(函数)，只能在当前函数内访问
				2、全局作用域：全局变量(函数)，一经定义，代码的任何位置都能访问
		2、函数作用域的变量
			将 变量 或 函数 声明在某函数内，有效范围就在该函数中，出了该函数，变量 或 函数 就失效
		3、全局作用域的变量 
			将 变量定义在 独立于 任何 function 的位置处(<script>中)，在代码的任何位置都可以访问到
			1、独立于任何 function 声明变量
			2、函数中，通过不写var的方式声明全局变量
		4、注意
			1、全局变量和局部变量冲突时，优先使用的是 局部变量
		5、声明提前
			JS程序在正式执行前，会将所有的var声明变量和function的声明函数，预读到所在作用域的顶部。

			但是，对变量的赋值依然保留在原位置上。
		6、按值传递
			基本数据类型 在做参数传递时，实际上将数据进行复制 得到一个副本，将副本传递到函数参数中
	4、函数作用域
		1、分类 
			与变量相似，分为
			1、全局作用域(全局函数)
			2、函数作用域(局部函数)
		2、常用全局函数
			1、parseInt()
			2、parseFloat()
			...
			3、encodeURI()
				uri:Uniform Resource Identifier(统一资源标识符)
				作用：对统一资源标识符进行编码，并且返回 编码后的URI字符串
				针对 URI 中 非 ASCII码的字符进行编码，转换为16进制的转义字符
				ASCII : American Standard Code for Information Interchange
			4、decodeURI()
				作用：对已编码的URI进行解码，返回解码后的数据
			5、eval()
				作用：计算并执行以字符串表示的JS代码
3、分支结构(重点)
	1、程序的流程控制
		程序 = 数据 + 算法
		
		任何复杂程序都可以通过以下三种结构实现
		1、顺序结构
			将可执行代码自顶向下执
		2、选择结构(分支)
			根据条件 选择某一块代码去执行
		3、循环结构
			根据条件 选择某一块代码反复执行
		
		问题：当 总价 大于或等于 500时，享受8折优惠

		分支结构：
			可根据条件，选择执行某些语句

		1、当条件满足时，运行某些语句
			 当条件不满足时，则不运行这些语句
			 ----if结构
		2、当条件满足时，运行某些语句
			 当条件不满足时，运行另外一些语句
			 ----if - else 结构
	2、if 结构
		1、语法
			if(条件){
				满足条件要执行的语句块;
			}
			流程：
				1、判断 条件的值 ：
					如果为 true， 则执行if语句块中的语句
					如果为 false，则不执行if语句块中的语句
		2、注意
			1、条件 是 boolean 的
				如果 出现的 条件 不是 boolean，则会自动转换
				出现以下几种情况，都作为假处理:
				if(0){}
				if(0.0){}
				if(undefined){}
				if(NaN){}
				if(null){}
				if(""){}

				if("我帅吗"){
					console.log("恭喜你，答对了!");
				}
			2、可以省略 if 后面的 {}
				如果 省略 {} ,那么if 只控制它下面的第一条语句
		3、问题
			异常情况：如果 收款金额 小于 应收金额
	3、if ... else 结构
		1、语法
			if(条件){
				满足条件所执行的代码块(语句块1)
			}else{
				不满足条件时所执行的代码块(语句块2)
			}

			流程：
			1、判断 条件 
				如果值为true，则执行语句块1
				如果值为false，则执行语句块2
	4、成绩计算 程序
		手动输入一个考试分数 (0~100)
		如果成绩 为 100分 ，奖励一台兰博基尼
		如果成绩 大于等于90分，奖励一台 法拉利
		如果成绩 大于等于80分，奖励一台 奥迪Q7
		如果成绩 大于等于70分，奖励一台 奥拓R8
		如果成绩 大于等于60分，奖励一台 自行车
		否则 奖励 俩大嘴巴子
4、else  .... if 结构 (多重if结构)
	1、语法

		if(条件1){
			语句块1;
		}else if(条件2){
			语句块2;
		}else if(条件3){
			语句块3;
		}...else if(条件n){
			语句块n;
		}else{
			else 语句块;
		}

练习：
	1、可莱托指数，通过 选择 结构完成
	2、日期计算器
		输入 出生的 年，月，日，计算 生日那一天，是那一年的第多少天!!


